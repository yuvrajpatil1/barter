// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// model images {
//   id         String    @id @default(auto()) @map("_id") @db.ObjectId
//   file_id    String
//   url        String
//   userId     String?   @db.ObjectId
//   shopId     String?   @unique @db.ObjectId
//   users      users?
//   shops      shops?    @relation(fields: [shopId], references: [id])
//   products   products? @relation(fields: [productsId], references: [id])
//   productsId String?   @db.ObjectId
// }

// model users {
//   id          String        @id @default(auto()) @map("_id") @db.ObjectId
//   name        String
//   email       String        @unique
//   role        String?
//   password    String?
//   following   String[]
//   avatar      images?       @relation(fields: [imagesId], references: [id])
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
//   shopReviews shopReviews[]
//   imagesId    String?       @unique @db.ObjectId
//   followings  followers[]
//   orders      orders[]
//   addresses   address[] // Add relation to addresses
// }

// enum addressType {
//   Home
//   Work
//   Other
// }

// model address {
//   id        String      @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String      @db.ObjectId
//   user      users       @relation(fields: [userId], references: [id])
//   label     addressType
//   name      String
//   street    String
//   city      String
//   zip       String
//   country   String
//   isDefault Boolean     @default(false)
//   createdAt DateTime    @default(now())
//   updatedAt DateTime    @updatedAt
// }

// model shopReviews {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String   @db.ObjectId
//   user      users    @relation(fields: [userId], references: [id])
//   rating    Float
//   reviews   String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   shopsId   String?  @db.ObjectId
//   shops     shops?   @relation(fields: [shopsId], references: [id])
// }

// model followers {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   userId  String @db.ObjectId
//   shopsId String @db.ObjectId

//   user  users  @relation(fields: [userId], references: [id])
//   shops shops? @relation(fields: [shopsId], references: [id])

//   @@unique([userId, shopsId])
// }

// model shops {
//   id            String        @id @default(auto()) @map("_id") @db.ObjectId
//   name          String
//   bio           String?
//   category      String
//   avatar        images?
//   coverBanner   String?
//   address       String
//   opening_hours String?
//   website       String?
//   socialLinks   Json[]
//   ratings       Float         @default(0)
//   reviews       shopReviews[]
//   followers     followers[]
//   sellerId      String        @unique @db.ObjectId
//   sellers       sellers       @relation(fields: [sellerId], references: [id])
//   createdAt     DateTime      @default(now())
//   updatedAt     DateTime      @updatedAt
//   products      products[]
//   isDeleted     Boolean       @default(false)
//   deletedAt     DateTime?
//   imagesId      String?       @db.ObjectId
//   orders        orders[]
// }

// model sellers {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   name         String
//   email        String   @unique
//   phone_number String
//   country      String
//   password     String
//   stripeId     String?
//   shop         shops?
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
// }

// model site_config {
//   id            String   @id @default(auto()) @map("_id") @db.ObjectId
//   categories    String[]
//   subCategories Json
//   logo          String?
//   banner        String?
// }

// model discount_codes {
//   id            String   @id @default(auto()) @map("_id") @db.ObjectId
//   public_name   String
//   discountType  String
//   discountValue Float
//   discountCode  String   @unique
//   sellerId      String   @db.ObjectId
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
// }

// enum productStatus {
//   Active
//   Pending
//   Draft
// }

// model products {
//   id                    String        @id @default(auto()) @map("_id") @db.ObjectId
//   title                 String
//   slug                  String        @unique
//   category              String
//   subCategory           String
//   short_description     String
//   detailed_description  String
//   images                images[]
//   video_url             String?
//   tags                  String[]
//   brand                 String?
//   colors                String[]
//   sizes                 String[]
//   starting_date         DateTime?
//   ending_date           DateTime?
//   stock                 Int
//   sale_price            Float
//   regular_price         Float
//   ratings               Float         @default(0)
//   ratingCount           Int?          @default(0)
//   warranty              String?
//   custom_specifications Json?
//   custom_properties     Json
//   isDeleted             Boolean?      @default(false)
//   cashOnDelivery        String?
//   discount_codes        String[]      @db.ObjectId
//   status                productStatus @default(Active)
//   totalSales            Int           @default(0)
//   deletedAt             DateTime?
//   createdAt             DateTime      @default(now())
//   updatedAt             DateTime      @updatedAt
//   shopId                String        @db.ObjectId
//   Shop                  shops         @relation(fields: [shopId], references: [id])
// }

// model userAnalytics {
//   id              String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId          String   @unique
//   country         String?
//   city            String?
//   device          String?
//   lastVisited     DateTime @default(now())
//   actions         Json? // Array of user actions
//   recommendations Json?
//   lastTrained     DateTime @default(now())

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model productAnalytics {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   productId    String   @unique @db.ObjectId
//   shopId       String
//   views        Int      @default(0)
//   cartAdds     Int      @default(0)
//   wishlistAdds Int      @default(0)
//   purchases    Int      @default(0)
//   lastViewedAt DateTime

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model shopAnalytics {
//   id            String @id @default(auto()) @map("_id") @db.ObjectId
//   totalVisitors Int

//   countryStats Json?
//   cityStats    Json?
//   deviceStats  Json?

//   lastVisitedAt DateTime

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model uniqueShopVisitors {
//   id     String  @id @default(auto()) @map("_id") @db.ObjectId
//   shopId String  @db.ObjectId
//   userId String? @db.ObjectId

//   visitedAt DateTime @default(now())

//   @@unique([shopId, userId])
// }

// model orders {
//   id     String @id @default(auto()) @map("_id") @db.ObjectId
//   userId String @db.ObjectId
//   user   users? @relation(fields: [userId], references: [id])
//   shopId String @db.ObjectId
//   shop   shops  @relation(fields: [shopId], references: [id])

//   total             Float
//   shippingAddressId String?
//   couponCode        String?
//   discountAmount    Float?
//   status            String
//   deliveryStatus    String       @default("Ordered")
//   items             orderItems[] @relation("OrderItemsRelation")
//   createdAt         DateTime     @default(now())
//   updatedAt         DateTime     @updatedAt
// }

// model orderItems {
//   id              String @id @default(auto()) @map("_id") @db.ObjectId
//   orderId         String @db.ObjectId
//   productId       String
//   quantity        Int
//   price           Float
//   selectedOptions Json?

//   orders    orders   @relation(fields: [orderId], references: [id], name: "OrderItemsRelation")
//   createdAt DateTime @default(now())
// }

// model notifications {
//   id            String  @id @default(auto()) @map("_id") @db.ObjectId
//   creatorId     String  @db.ObjectId
//   receiverId    String
//   redirect_link String?
//   title         String
//   message       String?
// }

// model conversationGroup {
//   id             String   @id @default(auto()) @map("_id") @db.ObjectId
//   isGroup        Boolean  @default(false)
//   name           String?
//   creatorId      String
//   participantIds String[] @db.ObjectId
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt
// }

// model participant {
//   id             String    @id @default(auto()) @map("_id") @db.ObjectId
//   conversationId String    @db.ObjectId
//   userId         String    @db.ObjectId
//   sellerId       String    @db.ObjectId
//   lastSeenAt     DateTime?
//   isOnline       Boolean   @default(false)
//   unreadCount    Int       @default(0)
//   muted          Boolean   @default(false)
//   joinedAt       DateTime  @default(now())
// }

// model message {
//   id             String   @id @default(auto()) @map("_id") @db.ObjectId
//   conversationId String   @db.ObjectId
//   senderId       String   @db.ObjectId
//   senderType     String
//   content        String?
//   attachments    String[]
//   status         String   @default("send")
//   createdAt      DateTime @default(now())

//   @@unique([conversationId, senderId, content, createdAt])
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  file_id    String
  url        String
  userId     String?   @db.ObjectId
  shopId     String?   @unique @db.ObjectId
  users      users?
  shops      shops?    @relation(fields: [shopId], references: [id])
  products   products? @relation(fields: [productsId], references: [id])
  productsId String?   @db.ObjectId
}

model users {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String        @unique
  role        String?
  password    String?
  following   String[]
  avatar      images?       @relation(fields: [imagesId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  shopReviews shopReviews[]
  imagesId    String?       @unique @db.ObjectId
  followings  followers[]
  orders      orders[]
  addresses   address[]
}

enum addressType {
  Home
  Work
  Other
}

model address {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  user      users       @relation(fields: [userId], references: [id])
  label     addressType
  name      String
  street    String
  city      String
  zip       String
  country   String
  isDefault Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model shopReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  rating    Float
  reviews   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shopsId   String?  @db.ObjectId
  shops     shops?   @relation(fields: [shopsId], references: [id])
}

model followers {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId  String @db.ObjectId
  shopsId String @db.ObjectId

  user  users  @relation(fields: [userId], references: [id])
  shops shops? @relation(fields: [shopsId], references: [id])

  @@unique([userId, shopsId])
}

model shops {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  bio           String?
  category      String
  avatar        images?
  coverBanner   String?
  address       String
  opening_hours String?
  website       String?
  socialLinks   Json[]
  ratings       Float         @default(0)
  reviews       shopReviews[]
  followers     followers[]
  sellerId      String        @unique @db.ObjectId
  sellers       sellers       @relation(fields: [sellerId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  products      products[]
  isDeleted     Boolean       @default(false)
  deletedAt     DateTime?
  imagesId      String?       @db.ObjectId
  orders        orders[]
}

model sellers {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String    @unique
  phone_number String
  country      String
  password     String
  stripeId     String?
  shop         shops?
  isDeleted    Boolean   @default(false)
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model site_config {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
  logo          String?
  banner        String?
}

model discount_codes {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  public_name   String
  discountType  String
  discountValue Float
  discountCode  String   @unique
  sellerId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum productStatus {
  Active
  Pending
  Draft
}

model products {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  slug                  String        @unique
  category              String
  subCategory           String
  short_description     String
  detailed_description  String
  images                images[]
  video_url             String?
  tags                  String[]
  brand                 String?
  colors                String[]
  sizes                 String[]
  starting_date         DateTime?
  ending_date           DateTime?
  stock                 Int
  sale_price            Float
  regular_price         Float
  ratings               Float         @default(0)
  ratingCount           Int?          @default(0)
  warranty              String?
  custom_specifications Json?
  custom_properties     Json
  isDeleted             Boolean?      @default(false)
  cashOnDelivery        String?
  discount_codes        String[]      @db.ObjectId
  status                productStatus @default(Active)
  totalSales            Int           @default(0)
  deletedAt             DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  shopId                String        @db.ObjectId
  Shop                  shops         @relation(fields: [shopId], references: [id])
}

model userAnalytics {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique
  country         String?
  city            String?
  device          String?
  lastVisited     DateTime @default(now())
  actions         Json?
  recommendations Json?
  lastTrained     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model productAnalytics {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  productId    String   @unique @db.ObjectId
  shopId       String
  views        Int      @default(0)
  cartAdds     Int      @default(0)
  wishlistAdds Int      @default(0)
  purchases    Int      @default(0)
  lastViewedAt DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model shopAnalytics {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  totalVisitors Int
  countryStats  Json?
  cityStats     Json?
  deviceStats   Json?
  lastVisitedAt DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model uniqueShopVisitors {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  shopId    String   @db.ObjectId
  userId    String?  @db.ObjectId
  visitedAt DateTime @default(now())

  @@unique([shopId, userId])
}

model orders {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  userId            String       @db.ObjectId
  user              users?       @relation(fields: [userId], references: [id])
  shopId            String       @db.ObjectId
  shop              shops        @relation(fields: [shopId], references: [id])
  total             Float
  shippingAddressId String?
  couponCode        String?
  discountAmount    Float?
  status            String
  deliveryStatus    String       @default("Ordered")
  items             orderItems[] @relation("OrderItemsRelation")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model orderItems {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String   @db.ObjectId
  productId       String
  quantity        Int
  price           Float
  selectedOptions Json?
  orders          orders   @relation(fields: [orderId], references: [id], name: "OrderItemsRelation")
  createdAt       DateTime @default(now())
}

model notifications {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  creatorId     String   @db.ObjectId
  receiverId    String
  redirect_link String?
  title         String
  message       String?
  status        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Improved conversation models
model conversationGroup {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  isGroup        Boolean  @default(false)
  name           String?
  creatorId      String   @db.ObjectId
  participantIds String[] @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Add relations
  participants participant[]
  messages     message[]
}

enum ParticipantType {
  USER
  SELLER
}

model participant {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  conversationId  String          @db.ObjectId
  participantId   String          @db.ObjectId // Can be userId or sellerId
  participantType ParticipantType // USER or SELLER
  lastSeenAt      DateTime?
  isOnline        Boolean         @default(false)
  unreadCount     Int             @default(0)
  muted           Boolean         @default(false)
  joinedAt        DateTime        @default(now())

  // Relations
  conversation conversationGroup @relation(fields: [conversationId], references: [id])

  @@unique([conversationId, participantId, participantType])
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

model message {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String          @db.ObjectId
  senderId       String          @db.ObjectId
  senderType     ParticipantType // USER or SELLER
  content        String?
  attachments    String[]
  status         MessageStatus   @default(SENT)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Relations
  conversation conversationGroup @relation(fields: [conversationId], references: [id])

  // Index for better query performance
  @@index([conversationId, createdAt])
}
